---
import { lex } from "../lexer/lexer";
import type { Instruction } from "../thp_machine/machine_parser";
import { parse_str } from "../thp_machine/machine_parser";
import { leftTrimDedent } from "./utils";
const { code, steps } = Astro.props;

function highlightCode(lines: Array<string>): string {
    let outLines: Array<string> = [];

    for (const [idx, line] of lines.entries()) {
        const tokens = lex(line);
        const lineArray = [
            `<div class=\"inline-block w-full\" :class=\"line === ${idx + 1}? 'bg-green-200 dark:bg-green-900': ''\">`,
        ];

        for (const token of tokens) {
            if (token.token_type !== "") {
                lineArray.push(
                    `<span class="token ${token.token_type}">${token.v}</span>`,
                );
            } else {
                lineArray.push(token.v);
            }
        }
        lineArray.push("</div>");

        outLines.push(lineArray.join(""));
    }

    return outLines.join("\n");
}

const codeHtml = highlightCode(leftTrimDedent(code));
let instructionSet: Array<Array<Instruction>>;
try {
    instructionSet = parse_str(steps);
} catch (e) {
    console.error(Astro.url);
    throw e;
}

const serialized_inst = JSON.stringify(instructionSet);
---

<div
    class="bg-black text-white rounded px-1"
    x-data={`{
        line: 0,
        stdout: "",
        ip: 0,
        inst: ${serialized_inst},
        done: false,
        state: {},
    }`}
>
    <span
        class="inline-block bg-[var(--code-theme-bg-acolor)] px-2 rounded-tl rounded-tr font-mono text-sm"
        >thp code</span
    >
    <pre
        class="language-thp"
        style="margin: 0;"
        data-disabled><code set:html={codeHtml} /></pre>
    <div class="grid grid-cols-2 font-mono text-sm">
        <div>
            <div class="p-1 border-b border-r border-white">stdout</div>
            <div class="h-24 p-1 border-r border-white">
                <pre><code class="bg-black" x-text="stdout" /></pre>
            </div>
        </div>
        <div>
            <div class="p-1 border-b border-white">state</div>
            <div class="h-24 p-1 overflow-y-scroll">
                <template x-for="(value, key) in state">
                    <div x-text="key.replaceAll(' ', 'Â ') + ' = ' + value">
                    </div>
                </template>
            </div>
        </div>
    </div>
    <div class="border-t border-white p-1">
        <button
            class="font-mono px-1 rounded bg-pink-200 dark:bg-pink-950 text-black dark:text-white disabled:opacity-50 disabled:cursor-not-allowed"
            @click="alpineNext($data)"
            :disabled="done && 'true'"
        >
            Step: <span x-text="ip"></span>
        </button>
        <button
            class="font-mono px-1 rounded bg-pink-200 dark:bg-pink-950 text-black dark:text-white"
            @click="alpineReset($data)"
        >
            Reset
        </button>
    </div>
</div>

<script>
    import {
        InstructionType,
        type Instruction,
    } from "../thp_machine/machine_parser";

    type AlpineState = {
        line: number;
        stdout: string;
        ip: number;
        inst: Array<Array<Instruction>>;
        done: boolean;
        state: { [key: string]: string };
    };

    /// Executes the instruction following the state of the machine.
    function alpineNext(data: AlpineState) {
        const len = data.inst.length;
        const ip = data.ip;
        data.ip += 1;

        const instructions = data.inst[ip]!;
        for (const instructionSet of instructions) {
            const i = instructionSet;

            switch (i.t) {
                case InstructionType.Line: {
                    data.line = Number(i.v0);
                    break;
                }
                case InstructionType.Out: {
                    data.stdout += i.v0.slice(1, -1) + "\n";
                    break;
                }
                case InstructionType.Set: {
                    const i_key = i.v0.slice(1, -1);
                    const i_value = i.v1!.slice(1, -1);
                    data.state[i_key] = i_value;
                    break;
                }
                case InstructionType.Unset: {
                    delete data.state[i.v0.slice(1, -1)];
                    break;
                }
            }
        }

        if (data.ip >= len) {
            data.done = true;
            return;
        }
    }
    // @ts-ignore
    window.alpineNext = alpineNext;

    function alpineReset(data: AlpineState) {
        data.line = 0;
        data.stdout = "";
        data.ip = 0;
        data.done = false;
        data.state = {};
    }
    // @ts-ignore
    window.alpineReset = alpineReset;
</script>
